if(length(tmp) > 1){
tmp <- substr(x,1,nchar(x)-nchar(tmp[length(tmp)])-1)
}
return(tmp)
}
#for running ####################
exp.data <- read.RealData(file = "exp_data.txt", sep = ",",
col.id = 1, col.value = 3, col.sd = 4)
folder.name = "prediction"
col.id = 1
col.value = 3
col.sd = 4
with.sd = TRUE
file.sep = "\t"
file.header = TRUE
chop.prefix = TRUE
chop.suffix = TRUE
na.character = "*"
real.data = exp.data
#################################
#read top folder
group.path <- paste(folder.name,list.files(folder.name), sep="/")
#obtain files in each sub-folder of the top folder
file.path <- unname(unlist(sapply(group.path,function(x) paste(x, list.files(x), sep="/"))))
#read files to matrices
data <- lapply(file.path,function(x) read.Prediction.File(x, col.id = col.id,
col.value = col.value,
col.sd = col.sd,
sep = file.sep,
header = file.header,
na.character = na.character,
with.sd = with.sd))
#modify id by removing folder names
if(chop.prefix){
file.path <- sapply(file.path, chopHeader)
}
#modify id by removing suffix like ".txt"
if(chop.suffix){
file.path <- sapply(file.path, chopTail)
}
names(data) <- file.path
#adjst data structure
data <- adjustDataStructure(data = data, with.sd = with.sd)
if(!is.null(real.data)){
# Reordering of the rows
data <- validate.Submission.data(real.data,data)
}
tmp.group = sapply(colnames(data$value), function(x) unlist(strsplit(x,split="_"))[2])
tmp.group = sapply(1:length(tmp.group), function(x) unlist(strsplit(tmp.group[x],split="-"))[1])
tmp.group = as.numeric(tmp.group)
group = data.frame(colnames(data$value),tmp.group)
names(group) = c("file","group")
data$group = group
return(data)
}
#' @decription Adding grouping information after parsing prediction files from folder
#' @param data the list with $value and $sd after parsing the prediction file folder
#' @param group_info a 1D integer vector specifying grouping of each column of value/sd matrix
#' @return original data with an addtional $group field as a list
#'         with value as group and rownames as file names
#' @example to get all files of a group : group %>% filter(group == 2) %>% select(file)
addGroup = function(data,group_info) {
file.labels = data.frame(colnames(data$value),stringsAsFactors = FALSE)
group = cbind(file.labels,group_info)
names(group) = c("file","group")
data$group = group
return(data)
}
lmFitHelpher = function(real.data,pred.data,sub.name){
exp = real.data$value
sub = pred.data$value[,sub.name]
dat = as.data.frame(cbind(exp,sub))
lm.fit=lm(exp~sub,data=dat)
x = summary(lm.fit)
return(x$adj.r.squared)
}
#' @decription fit each submission and the experimental value with linear value, then for each group,
#' keep the best fit submission based on adjusted R^2 statistics/pearson correlation
#' @name groupFilter
#' @param real.data the list with $value and $sd after parsing the prediction file folder
#' @param pred.data a 1D integer vector specifying grouping of each column of value/sd matrix
#' @return The original data set only keeping the best submission from each group
groupFilter = function(real.data, pred.data) {
######### debug input  #####################
real.data <- read.RealData(file = "exp_data.csv", sep = ",",
col.id = 2, col.value = 5, col.sd = 6)
# pred.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
#                                     col.value = 2, col.sd = 3, real.data = real.data)
# To change the name o unique identifiers
# real.data.2 <- read.RealData(file = "exp_data.csv", sep = ",",
#                            col.id = c(2,4), col.value = 5, col.sd = 6)
# names(pred.data$value) = names(real.data.2$value)
# names(pred.data$sd) = names(real.data.2$value)
# names(real.data$value) = names(real.data.2$value)
# names(real.data$sd) = names(real.data.2$value)
###################################################################
r_squares <- unlist(lapply(colnames(pred.data$value),
function(x) lmFitHelpher(real.data,pred.data,x))
)
r_squares_group = cbind(pred.data$group,r_squares)
max.r = r_squares_group %>% group_by(group) %>% summarise(max.r = max(r_squares))
selected.file = r_squares_group %>% filter(r_squares %in% max.r$max.r)
pred.data$value = pred.data$value[,selected.file$file]
pred.data$sd = pred.data$sd[,selected.file$file]
pred.data$group = selected.file
return (pred.data)
}
#' @decription normalize each of the column of the value to N(0,1)
#' @param real.data the experimental data from CAGI assessors
#' @param pred.data prediction data parsed in from submissions
#' @return z.real.data and z.pred.data
z.normalization = function(real.data, pred.data) {
z.Helper = function(column) {
std = sd(column, na.rm = TRUE)
avg = mean(column, na.rm = TRUE)
dat = (column - avg)/std
return(dat)
}
suppressWarnings(
z.pred.data <- sapply(1:ncol(pred.data$value),
function(x) z.Helper(pred.data$value[,x]))
)
z.real.data = z.Helper(real.data$value)
colnames(z.pred.data)=colnames(pred.data$value)
z = c()
z$real.data = z.real.data
z$pred.data = z.pred.data
return(z)
}
#' @decription evaluate the correlation coefficient between different samples and the real value
#' @name eval.Correlation
eval.Correlation <- function(real.data, pred.data, method = "pearson", sd.use = NA,z.transform = FALSE, boot = FALSE, ...){
if (z.transform) {
z_dat = z.normalization(real.data,pred.data)
real.data$value = z_dat$real.data
pred.data$value = z_dat$pred.data
}
sd.enable <- is.numeric(sd.use) & length(real.data$sd) >1
if(sd.enable){
keep <- (real.data$sd < sd.use) & (!is.na(real.data$sd))
real.data$value <- real.data$value[keep]
pred.data$value <- pred.data$value[keep, ]
}
n <- length(real.data$value)
suppressWarnings(
cor.coefficient <- sapply(1:ncol(pred.data$value),
function(x) cor.test(real.data$value, pred.data$value[,x],
method = method)$estimate))
suppressWarnings(
cor.p.value <- sapply(1:ncol(pred.data$value),
function(x) cor.test(real.data$value, pred.data$value[,x],
method = method)$p.value))
cor.result <- data.frame(cor.coefficient, cor.p.value)
#print(real.data$value)
# cor.to.plot <- cor(pred.data$value,real.data$value, method=method, use = "complete.obs")#tbd
# corrplot(cor.to.plot, method = "number") #tbd
colnames(cor.result) <- c(paste(method,".coefficient",".n=",n, sep=''), "p.value")
rownames(cor.result)=colnames(pred.data$value)
if(sd.enable){
colnames(cor.result)[1] <- paste(colnames(cor.result)[1], ".sd<", sd.use, sep="")
}
# add bootstrap
if (boot) {
# #####input################
# real.data <- read.RealData(file = "exp_data.csv", sep = ",",
#                            col.id = 2, col.value = 5, col.sd = 6)
# pred.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
#                                     col.value = 2, col.sd = 3, real.data = exp.data)
# method = "pearson"
# sd.use = 0.3
# z.transform = TRUE
# ################################
rep.time = 500
rep.obj = bootstrap.Helper(real.data,pred.data,rep.time)
real.rep = rep.obj$real.rep
pred.rep = rep.obj$pred.rep
cor.rep = lapply(1:rep.time,function(x) eval.Correlation(real.data = real.rep[[x]], pred.data = pred.rep[[x]],
method, sd.use,z.transform,boot = F))
coefficient.rep = list.cbind(lapply(1:rep.time,function(x) cor.rep[[x]][,1]))
pval.rep = list.cbind(lapply(1:rep.time,function(x) cor.rep[[x]][,2]))
row.names(coefficient.rep) = row.names(cor.rep[[1]])
ci_low = list.rbind(lapply(1:nrow(coefficient.rep),function(x) quantile(coefficient.rep[x,],probs=0.05)))
ci_high = list.rbind(lapply(1:nrow(coefficient.rep),function(x) quantile(coefficient.rep[x,],probs=0.95)))
sd = list.rbind(lapply(1:nrow(coefficient.rep),function(x) sd(coefficient.rep[x,])))
avg = list.rbind(lapply(1:nrow(coefficient.rep),function(x) mean(coefficient.rep[x,])))
p.median = list.rbind(lapply(1:nrow(coefficient.rep),function(x) median(pval.rep[x,])))
cor.result = cbind(avg,ci_low,ci_high,sd,p.median)
row.names(cor.result) = row.names(cor.rep[[1]])
colnames(cor.result) = c("avg","low_ci","high_ci","sd","p.value")
}
return(as.data.frame(cor.result))
}
#' @decription The function takes in the distance matrix from the eval.RMSD function and output a normalized
#' version based on variance
#' For RMSD, the normalization for X1~N(V1,sd1^2), X2~N(V2,sd2^2) â€”>D = X1-X2~N(V1-V2,sd1^2 + sd2^2),
#' normalize all the variance for RMSD to 1
#' @name var.normalize
#' @param rmsd the rmsd result from the eval.RMSD function
folder.name = "prediction"
col.id = 1
col.value = 3
col.sd = 4
with.sd = TRUE
exp.data <- read.RealData(file = "exp_data.txt", sep = ",",
col.id = 1, col.value = 3, col.sd = 4)
folder.name = "prediction"
col.id = 1
col.value = 3
col.sd = 4
with.sd = TRUE
file.sep = "\t"
file.header = TRUE
chop.prefix = TRUE
value
value
exp.data <- read.RealData(file = "exp_data.txt", sep = ",",
col.id = 1, col.value = 3, col.sd = 4)
folder.name = "prediction"
col.id = 1
col.value = 3
col.sd = 4
with.sd = TRUE
file.sep = "\t"
file.header = TRUE
chop.prefix = TRUE
chop.suffix = TRUE
na.character = "*"
real.data = exp.data
group.path <- paste(folder.name,list.files(folder.name), sep="/")
file.path <- unname(unlist(sapply(group.path,function(x) paste(x, list.files(x), sep="/"))))
file.path
file.name = "prediction/group_1/Group_1-Anonymous-1.txt"
sep = "\t"
header = TRUE
na.character = "*"
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character,...)
data
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
data
id <- data[ , col.id[1]]
id
if(length(col.id) > 1){
id <- sapply(2:length(col.id),function(x) paste(id,data[,col.id[x]],sep='.'))
}
col.value = 3
value <- as.numeric(as.character(data[ , col.value]))
names(value) <- id
with.sd = 1
col.sd = 4
if(with.sd){
sd <- as.numeric(as.character(data[ , col.sd]))
names(sd) = id
# if(is.na(sd[1])){
#   sd <- rep(NA,length(sd))
#   # YuC: don't get why to execute so, comment out as Zhiqiang suggests
# }
}
else{
sd <- NA
}
return.data <- list(value,sd)
names(return.data) <- c("value", "sd")
return.data
sd <- as.numeric(as.character(data[ , col.sd]))
sd
names(sd) = id
return.data <- list(value,sd)
names(return.data) <- c("value", "sd")
return.data
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
source("GAA-EVAL.R")
exp.data <- read.RealData(file = "exp_data.txt", sep = ",",
col.id = 1, col.value = 3, col.sd = 4)
exp.data
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
file.name = ""prediction/group_4/Group_4-FoxChase-1.txt""
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
file.name = "prediction/group_4/Group_4-FoxChase-1.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
file.name
sep
header = header
header
na.character
file.name = "prediction/group_10/Group_10-ySNAP-1.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
file.name = "prediction/group_4/Group_4-FoxChase-1.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
file.name = "prediction/group_9/Group_9-SPARKS-1.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
id <- data[ , col.id[1]]
if(length(col.id) > 1){
id <- sapply(2:length(col.id),function(x) paste(id,data[,col.id[x]],sep='.'))
}
value <- as.numeric(as.character(data[ , col.value]))
names(value) <- id
if(with.sd){
sd <- as.numeric(as.character(data[ , col.sd]))
names(sd) = id
# if(is.na(sd[1])){
#   sd <- rep(NA,length(sd))
#   # YuC: don't get why to execute so, comment out as Zhiqiang suggests
# }
}
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
id <- data[ , col.id[1]]
if(length(col.id) > 1){
id <- sapply(2:length(col.id),function(x) paste(id,data[,col.id[x]],sep='.'))
}
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
file.name = "prediction/group_9/Group_9-SPARKS-4.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
id <- data[ , col.id[1]]
if(length(col.id) > 1){
id <- sapply(2:length(col.id),function(x) paste(id,data[,col.id[x]],sep='.'))
}
value <- as.numeric(as.character(data[ , col.value]))
names(value) <- id
if(with.sd){
sd <- as.numeric(as.character(data[ , col.sd]))
names(sd) = id
# if(is.na(sd[1])){
#   sd <- rep(NA,length(sd))
#   # YuC: don't get why to execute so, comment out as Zhiqiang suggests
# }
}
else{
sd <- NA
}
return.data <- list(value,sd)
file.name = "prediction/group_9/Group_9-SPARKS-4.txt"
sep = "\t"
header = TRUE
na.character = "*"
col.value = 3
with.sd = 1
col.sd = 4
print(file.name)
data <- read.table(file.name, sep = sep, header = header, na.strings = na.character)
id <- data[ , col.id[1]]
if(length(col.id) > 1){
id <- sapply(2:length(col.id),function(x) paste(id,data[,col.id[x]],sep='.'))
}
value <- as.numeric(as.character(data[ , col.value]))
names(value) <- id
if(with.sd){
sd <- as.numeric(as.character(data[ , col.sd]))
names(sd) = id
# if(is.na(sd[1])){
#   sd <- rep(NA,length(sd))
#   # YuC: don't get why to execute so, comment out as Zhiqiang suggests
# }
} else{
sd <- NA
}
return.data <- list(value,sd)
names(return.data) <- c("value", "sd")
return.data
source("GAA-EVAL.R")
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
source("GAA-EVAL.R")
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
debugSource('~/Desktop/p16/GAA-EVAL.R')
source("GAA-EVAL.R")
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
data$value
data$sd
debugSource('~/Desktop/p16/GAA-EVAL.R')
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
data
if(chop.prefix){
file.path <- sapply(file.path, chopHeader)
}
if(chop.suffix){
file.path <- sapply(file.path, chopTail)
}
names(data) <- file.path
data
data <- adjustDataStructure(data = data, with.sd = with.sd)
data
debugSource('~/Desktop/p16/GAA-EVAL.R')
debugSource('~/Desktop/p16/GAA-EVAL.R')
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
order=names(data[[1]]$value)
order
value <- sapply(1:length(data), function(x) return(data[[x]]$value[order]))
value
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data$value
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data$value
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
sub.data$value
sub.data$sd
addGroup(sub.data,c(1,2,2,2,3,4,5,5,5,6,7,7,8,8,8,9,9,9,9))
sub.data$group
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
addGroup(sub.data,c(1,2,2,2,3,4,5,5,5,6,7,7,8,8,8,9,9,9,9))
sub.data$group
sub.data <- read.Submission.Folder(folder.name = "prediction/",col.id = 1,
col.value = 3, col.sd = 4, real.data = exp.data)
addGroup(sub.data,c(1,2,2,2,3,4,5,5,5,6,7,7,8,8,8,9,9,9,9))
sub.data$group
plot_all_scatter(real.data = exp.data, pred.data = sub.data, z.transform = TRUE)
source("GAA-EVAL.R")
plot_all_scatter(real.data = exp.data, pred.data = sub.data, z.transform = TRUE)
result.cor.pearson <- eval.Correlation(real.data = exp.data, pred.data = sub.data,
method = "pearson", sd.use = 0.3,z.transform = TRUE)
result.cor.pearson <- eval.Correlation(real.data = exp.data, pred.data = sub.data,
method = "pearson", sd.use = NA,z.transform = TRUE)
head(result.cor.pearson)
plot.Correlation(result.cor.pearson, "Pearson")
result.rmsd <- eval.RMSD(real.data = exp.data, pred.data = sub.data,sd.use = NA,
density.distance = TRUE, density.distance.adjust = FALSE, variance.normalization = TRUE)
head(result.rmsd)
plot.RMSD(result.rmsd, method="")
result.rmsd <- eval.RMSD(real.data = exp.data, pred.data = sub.data,sd.use = NA,
density.distance = TRUE, density.distance.adjust = FALSE, variance.normalization = FALSE)
head(result.rmsd)
plot.RMSD(result.rmsd, method="")
result.auc.0.9 <- eval.AUC(real.data =exp.data, pred.data = sub.data,
threshold = 0.9)
result.auc.0.9 <- eval.AUC(real.data =exp.data, pred.data = sub.data,
threshold = 30)
result.bM.spearman <-eval.Correlation.Between(real.data = exp.data, pred.data = sub.data,
method = "spearman",sd.use = 0.5,z.transform = TRUE)
result.bM.spearman <-eval.Correlation.Between(real.data = exp.data, pred.data = sub.data,
method = "spearman",sd.use = NA,z.transform = TRUE)
plot.Correlation.Between(result.bM.spearman$coefficient, method="Spearman")
result.pCor <- eval.Partial.Correlation(real.data = exp.data, pred.data = sub.data, method = "spearman")
plot.Correlation.Between(result.bM.spearman$coefficient, method="Spearman")
total = cbind(real = exp.data$value,sub.data$value)
Plot.PCA(na.omit(total), labels=F, legend=TRUE)
result.uniq = eval.uniqueness(real.data = exp.data, pred.data = sub.data)
result.uniq = eval.uniqueness(real.data = exp.data, pred.data = sub.data)
source("GAA-EVAL.R")
source("GAA-EVAL.R")
result.uniq = eval.uniqueness(real.data = exp.data, pred.data = sub.data)
result.uniq
result.uniq = eval.uniqueness(real.data = exp.data, pred.data = sub.data)
result.uniq
getwd()
source("GAA-EVAL.R")
exp.data <- read.RealData(file = "exp_data.txt", sep = "\t",
col.id = 1, col.value = 2, col.sd = 3)
exp.data <- read.RealData(file = "exp_data.txt", sep = "\t",
col.id = 1, col.value = 2, col.sd = 4)
exp.data <- read.RealData(file = "exp_data.txt", sep = "\t",
col.id = 1, col.value = 3, col.sd = 4)
exp.data <- read.RealData(file = "exp_data.txt", sep = "\t",
col.id = 1, col.value = 3, col.sd = 4)
